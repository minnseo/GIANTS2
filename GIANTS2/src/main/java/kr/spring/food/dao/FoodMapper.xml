<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.spring.food.dao.FoodMapper">

	<!-- 매장목록 리스트를 위한 memberVO
	<resultMap type="memberVO" id="compMap">
		<result property="companyDetailVO.comp_num" column="comp_num" />
		<result property="companyDetailVO.comp_name" column="comp_name" />
	</resultMap> 
	-->
	
	<!-- 장바구니 체크를 위한 f_cartVO -->
	<resultMap type="f_cartVO" id="cartMap">
		<result property="food_num" column="food_num"/>
		<result property="foodVO.comp_num" column="comp_num"/>
		<result property="foodVO.food_num" column="food_num"/>
		<result property="foodVO.food_name" column="food_name"/>
		<result property="foodVO.food_price" column="food_price"/>
		<result property="foodVO.food_quantity" column="food_quantity"/>
		<result property="foodVO.food_photo1" column="food_photo1"/>
		<result property="foodVO.food_photo1_name" column="food_photo1_name"/>
		<result property="foodVO.food_status" column="food_status"/>
	</resultMap>
	
	<!-- 기업 식품 등록 -->
	<insert id="insertFood" parameterType="foodVO">
		INSERT INTO food(
			food_num,
			comp_num,
			food_name,
			food_price,
			food_quantity,
			food_content,
			food_photo1,
			food_photo1_name,
			food_photo2,
			food_photo2_name,
			food_regdate,
			food_status)
		VALUES(
			food_seq.nextval,
			#{comp_num},
			#{food_name},
			#{food_price},
			#{food_quantity},
			#{food_content},
			#{food_photo1},
			#{food_photo1_name},
			#{food_photo2},
			#{food_photo2_name},
			sysdate,
			#{food_status}
		)
	</insert>
	<!-- 기업 식품 수정 -->
	<update id="fixFood" parameterType="foodVO">
		UPDATE 
			FOOD 
		SET 
			food_name=#{food_name}, 
			food_price=#{food_price},
			food_quantity=#{food_quantity},
			food_content=#{food_content},
			<if test="food_photo1_name != null">
			food_photo1=#{food_photo1},
			food_photo1_name=#{food_photo1_name},
			</if>
			<if test="food_photo2_name != null">
			food_photo2=#{food_photo2},
			food_photo2_name=#{food_photo2_name},
			</if>
			food_modifydate=SYSDATE,
			food_status=#{food_status}
		WHERE food_num=#{food_num}
	</update>
	
	<!-- 식품목록 레코드수 쿼리 -->
	<select id="selectRowCount" parameterType="string" resultType="integer">
		SELECT
		  COUNT(*)
		FROM food
		WHERE comp_num=#{comp_num}
	</select>
	
	<!-- 식품목록 리스트 페이징 쿼리 -->
	<select id="selectList" parameterType="map" resultType="foodVO">
		SELECT
		  *
		FROM (SELECT
				a.*,
				rownum rnum
			  FROM (SELECT
			  		  *
			  		FROM food
			  		WHERE comp_num=#{comp_num}
			  		ORDER BY food_num DESC)a)
		<![CDATA[
		WHERE rnum >= #{start} AND rnum <= #{end}
		]]>
	</select>
	
	<!-- 매장 상세정보 쿼리 -->
	<select id="selectComp" parameterType="string" resultType="companyDetailVO">
		SELECT 
		  c.comp_num, 
		  comp_name, 
		  comp_photo, 
		  comp_photoname, 
		  comp_content, 
		  comp_cate, 
		  comp_score
        FROM company_detail c
        LEFT OUTER JOIN (SELECT c.comp_num as comp_num, round(avg(comp_score),2) as comp_score
                         FROM company_detail c JOIN food_review r
                         ON c.comp_num=r.comp_num
                         WHERE c.comp_num=#{comp_num}
                         GROUP BY c.comp_num) r
        ON c.comp_num=r.comp_num
        WHERE c.comp_num=#{comp_num}
	</select>
	
	<!-- 매장목록 레코드수 쿼리 -->
	<select id="selectCompRowCount" parameterType="map" resultType="integer">
		SELECT 
		  COUNT(*)
		FROM 
			company_detail
		WHERE comp_cate=#{comp_cate}
	</select>
	
	<!-- 매장목록 리스트 페이징 쿼리 -->
	<select id="selectCompList" parameterType="map" resultType="companyDetailVO">
		SELECT
    		*
		FROM (SELECT 
      		  	a.*,
	  		  	rownum rnum
      		  FROM(SELECT 
	      		  		c.comp_num, 
	      		  		comp_name, 
	      		  		comp_photo, 
	      		  		comp_photoname, 
	      		  		comp_content, 
	      		  		comp_cate, 
	      		  		comp_score
           		   FROM company_detail c
           		   LEFT OUTER JOIN (SELECT c.comp_num as comp_num, round(avg(comp_score),2) as comp_score
                            		FROM company_detail c JOIN food_review r
                            		ON c.comp_num=r.comp_num
                            		WHERE c.comp_cate=#{comp_cate}
                            		GROUP BY c.comp_num) r
          		   ON c.comp_num=r.comp_num
          		   <if test="sort == 1">
           		   ORDER BY comp_score ASC
           		   </if>
           		   <if test="sort == 2">
           		   ORDER BY comp_score DESC
           		   </if>
           		   )a
           		   WHERE comp_cate=#{comp_cate}
           	  )
		<![CDATA[
		WHERE rnum >= #{start} AND rnum <= #{end}
		]]>
	</select>
	
	<!-- 리뷰목록 레코드수 쿼리 -->
	<select id="selectReviewRowCount" parameterType="map" resultType="integer">
		SELECT
		  COUNT(*)
		FROM food_review
		WHERE comp_num=#{comp_num}
	</select>
	
	<!-- 리뷰목록 리스트 페이징 쿼리 -->
	<select id="selectReviewList" parameterType="map" resultType="food_reviewVO">
		SELECT
		  *
		FROM (SELECT
				a.*,
				rownum rnum
			  FROM (SELECT
			  		  *
			  		FROM food_review
			  		WHERE comp_num=#{comp_num}
			  		ORDER BY review_num DESC)a)
		<![CDATA[
		WHERE rnum >= #{start} AND rnum <= #{end}
		]]>
	</select>
	
	
	<!-- ================== 장바구니 ======================= -->
	<!-- 장바구니 상품 등록 -->
	<insert id="insertF_cart" parameterType="f_cartVO">
		INSERT INTO f_cart(
		    cart_num,
		    food_num,
		    mem_num,
		    f_cart_quantity,
		    f_cart_price) 
		VALUES(
		    f_cart_seq.nextval,
		    #{food_num},
		    #{mem_num},
		    #{f_cart_quantity},
		    #{f_cart_price})
	</insert>
	<!-- (장바구니 추가를 위한) 내 장바구니 아이템 목록 조회  -->
	<select id="selectF_cartList" parameterType="integer" resultMap="cartMap">
	SELECT 
	  *
	FROM (SELECT re.cart_num, re.f_cart_quantity, re.f_cart_price, re.food_num, re.mem_num, 
				 f.comp_num, f.food_name, f.food_price, 
				 f.food_quantity, f.food_photo1, f.food_photo1_name, f.food_status
	  FROM (SELECT *
		    FROM f_cart 
		    WHERE mem_num=#{mem_num}
		   ) re
	  LEFT JOIN food f
	  ON re.food_num=f.food_num
	)
	</select>
	
	
	
	<!-- 주문 -->
	<!-- 주문폼 에서 장바구니 호출용 쿼리문 -->
	<sql id="cartCondition">
		WHERE mem_num=#{mem_num}
		/*주문폼에서 장바귀 정보 읽어 올 때 cart_numbers 사용함*/
		<if test="cart_numbers!=null and cart_numbers.length>0">
			AND cart_num IN
			<foreach item="item" index="index" collection="cart_numbers"
                        open="(" separator="," close=")">  
				#{item}
			</foreach>
		</if>
	</sql>	
	
	<!-- 장바구니에서 주문한 총 금액 불러오기 -->
	<select id="selectTotalByMem_num" parameterType="map" resultType="integer">
		SELECT 
    	  NVL(SUM(sub_total),0)
		FROM (SELECT 
        	    mem_num,
        	    cart_num,
        	    (f_cart_quantity*f_cart_price) as sub_total
      		  FROM f_cart)
		<include refid="cartCondition"></include>
	</select>
	
	<!-- 장바구니 목록 가져오기 -->
	<select id="selectF_cartListForOrder" parameterType="map" resultMap="cartMap">
		SELECT
		  cart_num,
		  food_num,
		  comp_num,
		  f_cart_quantity,
		  f_cart_price,
		  mem_num,
		  food_name,
		  food_price,
		  food_quantity,
		  food_status
		FROM f_cart JOIN food USING(food_num)
		<include refid="cartCondition"></include>
		ORDER BY food_num ASC
	</select>
	
	<!-- 식품 주문등록하기 시작 -->
	<insert id="insertF_order" parameterType="f_orderVO">
		INSERT INTO f_order(
		  f_order_num,
		  mem_num,
		  comp_num,
		  f_order_name,
		  total_price,
		  buyer_name,
		  buyer_phone,
		  buyer_email,
		  f_order_regDate,
		  f_order_expireDate,
		  qrlink,
		  pg,
		  pay_method)
		VALUES(
		  #{f_order_num},
		  #{mem_num},
		  #{comp_num},
		  #{f_order_name},
		  #{total_price},
		  #{buyer_name},
		  #{buyer_phone},
		  #{buyer_email},
		  SYSDATE,
		  SYSDATE + INTERVAL '90' DAY,
		  #{qrlink},
		  #{pg},
		  #{pay_method})
	</insert>
	
	<insert id="insertF_order_detail" parameterType="f_order_detailVO">
		INSERT INTO f_order_detail(
		  f_detail_num,
		  food_num,
		  f_order_num,
		  order_quantity,
		  food_name,
		  food_price,
		  food_total)
		VALUES(
		  f_order_detail_seq.nextval,
		  #{food_num},
		  #{f_order_num},
		  #{order_quantity},
		  #{food_name},
		  #{food_price},
		  #{food_total})
	</insert>
	
	<!-- 식품 주문등록하기 끝 -->
	
	
	<!-- 주문목록 호출하기 시작 -->
	<!-- 
		sort 0 = 이미사용된 영수증 검색
		sort 1 = 사용하기전 영수증 검색
		sort 2 = 모든 영수증 검색
	-->
	<sql id="orderSort">
		<where>
			<if test="sort == 0">
				mem_num=#{mem_num}
				AND f_order_status = 0
			</if>
			<if test="sort == 1">
				mem_num=#{mem_num}
				AND f_order_status = 1
			</if>
			<if test="sort == 2">
				mem_num=#{mem_num}
			</if>
		</where>
	</sql>
	
	<select id="selectOrderRowCount" parameterType="map" resultType="integer">
		SELECT
		  COUNT(*)
		FROM 
		  f_order
		<include refid="orderSort"></include>
	</select>
	
	<select id="selectOrderList" parameterType="map" resultType="f_orderVO">
		SELECT
		  *
		FROM (SELECT
			    a.*,
			    rownum rnum
			  FROM (SELECT
			  		  *
			  		FROM f_order
			  		<include refid="orderSort"></include>
			  		ORDER BY f_order_num DESC)a)
		<![CDATA[
		WHERE rnum >= #{start} AND rnum <= #{end}
		]]>
	</select>
	<!-- 주문목록 호출하기 끝 -->
	
	<!-- 주문 상세정보확인 -->
	<select id="selectF_order" parameterType="map" resultType="f_orderVO">
		SELECT 
		  * 
		FROM 
		  f_order 
		WHERE f_order_num=#{f_order_num} 
		AND mem_num=#{mem_num}
	</select>
	
	<!-- 식품 리뷰 등록 -->
	<insert id="insertFoodReview" parameterType="food_reviewVO">
		INSERT INTO food_review(
			review_num,
			mem_num,
			comp_num,
			comp_score,
			review_title,
			review_content,
			review_regdate)
		VALUES(
			food_review_seq.nextval,
			#{mem_num},
			#{comp_num},
			#{comp_score},
			#{review_title},
			#{review_content},
			sysdate
		)
	</insert>
	
	
</mapper>



















